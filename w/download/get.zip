##############################
## get.zip
##
## compress the content of the session
##
###########################################################################
# This code is part of wITIP (a web based Information Theoretic Prover)
#
# Copyright (2017) Laszlo Csirmaz, Central European University, Budapest
# This program is free, open-source software. You may redistribute it
# and/or modify under the terms of the GNU General Public License (GPL).
# There is ABSOLUTELY NO WARRANTY, use at your own risk.
###########################################################################

use wSession;
use wAnApache;
use wHtml;
use wUtils;
use strict;

sub notfound {
    my($session,$file)=@_;
    my $basehtml=$session->getconf("basehtml");
    print "Status: 404 Not Found\n";
    print "Content-type: text/html\n\n";

    print <<NOTFOUND;

<html>
<head><title>404: Not Found</title></head>
<body>
<h1>Not Found</h1>
<p>The file your requested ($file) is not available.
Use the <a href="$basehtml">wITIP starting page</a> to
work with wITIP.</p>
</body>
</html>

NOTFOUND
    exit wAnApache::NOT_FOUND;
}


my $session = new wSession;
exit (0) unless { defined $session };

my $arg=$session->getpar("what");
# $arg cannot contain %, maybe it's doubly encoded
$arg =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C",hex($1))/eg;
# <SSID>_Jan07_AB98.txt
if($arg =~ m#^(.+)_[A-Z][a-z][a-z]\d\d_[A-Z0-9]{4}\.txt# ){
    my $SSID=$1;
    if($session->add_SSID($SSID)){ # not a correct SSID
        notfound($session,$arg);
    }

    print "Content-Type: text/plain; charset=UTF-8\n";
    print "Pragma: no-cache\n";
    print "Cache-Control: no-cache\n";
    print "Content-Disposition: attachement; filename=\"$arg\"\n";
    print "\n";

    print "#!witip ",
       ($session->getconf("style")?"simple" : "traditional"),
       " sepchar=",$session->getconf("sepchar"),"\r\n",
       "# wITIP command file -- can be edited.\r\n",
       "#\r\n",
       "# Syntax: The first line should be exactly as above. Other lines\r\n",
       "# starting with # are comment lines and are ignored. Non comment\r\n",
       "# lines should start with a command word at the first position.\r\n",
       "# Execution stops at the first error, or after the query line.\r\n",
       "# Accepted commands:\r\n",
       "#   clear macros\r\n",
       "#   clear constraints\r\n",
       "# delete all macros and constraints, respectively.\r\n",
       "#   macro <macro definition>\r\n",
       "# add a macro definition.\r\n",
       "#   constraint enabled <constraint>\r\n",
       "#   constraint disabled <constraint>\r\n",
       "# add a constraint, and automatically enable/disable it.\r\n",
       "#   query <query>\r\n",
       "# last executed line, a query.\r\n";
    use wList;
    wList::Create($session);
    exit wAnApache::OK;
}

# <SSID>_Jan07_AB98.zip

if( $arg !~ m#^(.+)_[A-Z][a-z][a-z]\d\d_[A-Z0-9]{4}\.zip# ){
    notfound($session,$arg);
}
my $SSID=$1;
if($session->add_SSID($SSID)){ # not a correct SSID
    notfound($session,$arg);
}

use wZip;
my $filename=wZip::create($session);
if(!$filename){ # some error, sorry
    notfound($session,$arg);
}

print "Content-Type: application/zip\n";
print "Pragma: no-cache\n";
print "Cache-Control: no-cache\n";
print "Content-Disposition: attachement; filename=\"$arg\"\n";
print "\n";

my $fh;
open($fh,"-|",$session->getconf("zip")." -qq -j - $filename");
my ($rlen,$buff);
do{
    $rlen=sysread($fh,$buff,4096);
    if($rlen){ print $buff; }
} while(defined $rlen && $rlen>0);
close($fh);

unlink($filename);

# clear modified flag
$session->{config} = wUtils::read_user_config($session);
if($session->getconf("modified")){ # clear changed flag
    $session->setconf("modified","");
    wUtils::write_user_config($session);
}

exit wAnApache::OK;

__END__

=pod

=head1 wITIP dynamic data page

=head2 download/get.zip

Create the save file containing the actual content of the session.
Using Apache2 rewrite engine, the requested file name is converted
to the argument of the form

    what=I<SSID>_Jan07_AB98.zip

The session ID is followed by month and date, and four random capital 
letters and digits, and extension `.zip'. If it has incorrect form,
we return 404 "Not found" error. Otherwise the wZip::create($session)
calls creates a temporary text file; it is zipped and written out
as a file to be saved on the local machine.

=cut

